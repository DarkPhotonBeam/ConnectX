[{"/home/dan/WebstormProjects/multiplayerTest/client/src/reportWebVitals.js":"1","/home/dan/WebstormProjects/multiplayerTest/client/src/App.js":"2","/home/dan/WebstormProjects/multiplayerTest/client/src/index.js":"3","/home/dan/WebstormProjects/fourwins/client/src/App.js":"4","/home/dan/WebstormProjects/fourwins/client/src/index.js":"5","/home/dan/WebstormProjects/fourwins/client/src/reportWebVitals.js":"6"},{"size":362,"mtime":1610149589767,"results":"7","hashOfConfig":"8"},{"size":5396,"mtime":1610290536777,"results":"9","hashOfConfig":"8"},{"size":501,"mtime":1610150210017,"results":"10","hashOfConfig":"8"},{"size":8816,"mtime":1611964731016,"results":"11","hashOfConfig":"12"},{"size":501,"mtime":1610150210017,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1610149589767,"results":"14","hashOfConfig":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"cza9m8",{"filePath":"17","messages":"18","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"1sciizf",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/dan/WebstormProjects/multiplayerTest/client/src/reportWebVitals.js",[],"/home/dan/WebstormProjects/multiplayerTest/client/src/App.js",["28","29","30","31","32","33","34","35","36","37","38"],"/home/dan/WebstormProjects/multiplayerTest/client/src/index.js",[],"/home/dan/WebstormProjects/fourwins/client/src/App.js",["39","40","41","42","43"],"import './App.scss';\nimport { useState, useEffect } from 'react';\nimport music from './assets/theCursedLand.mp3';\nimport { Howl, Howler} from 'howler';\n\nconst bgMusic = new Howl({\n    src: [music],\n    loop: true,\n    autoplay: true,\n    volume: 0.025,\n});\n\nif (localStorage.getItem('music_timestamp') !== null) bgMusic.seek(localStorage.getItem('music_timestamp'));\n\nsetInterval(() => {\n    localStorage.setItem('music_timestamp', bgMusic.seek());\n}, 250);\n\nfunction gen_uuid(){\n    let dt = new Date().getTime();\n    const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        const r = (dt + Math.random()*16)%16 | 0;\n        dt = Math.floor(dt/16);\n        return (c==='x' ? r :(r&0x3|0x8)).toString(16);\n    });\n    return uuid;\n}\n\nlet WS_URL = process.env.NODE_ENV === 'development' ? 'ws://localhost:3333' : 'wss://connect4.photonbeam.ch:3313';\nif (localStorage.getItem('player') === null) localStorage.setItem('player', '1');\nconst uuid = localStorage.getItem('uuid') === null ? gen_uuid() : localStorage.getItem('uuid');\nlocalStorage.setItem('uuid', uuid);\n\nconst ws = new WebSocket(WS_URL);\n\nfunction sendMsg(msg) {\n    ws.send(JSON.stringify(msg));\n}\n\nfunction App() {\n    const [ tileData, setTileData ] = useState( [] );\n    const [ players, setPlayers ] = useState( [] );\n    const [ gameState, setGameState ] = useState( 0 );\n    const [ requestedUsername, setRequestedUsername ] = useState( false );\n    const [ winner, setWinner ] = useState( [] );\n\n    useEffect(() => {\n        ws.addEventListener('message', msg => {\n            const _msg = JSON.parse(msg.data);\n            switch(_msg.action) {\n                case 'update_players':\n                    setPlayers(_msg.players);\n                    break;\n                case 'update_game_state':\n                    console.log(_msg.game_state);\n                    setGameState(_msg.game_state);\n                    break;\n                case 'ping':\n                    ws.send(JSON.stringify({\n                        action: 'pong',\n                        uuid: uuid,\n                    }));\n                    break;\n                case 'update_tile_data':\n                    setTileData(_msg.tile_data);\n                    break;\n                case 'info':\n                    console.log(_msg.text);\n                    break;\n                case 'request_username':\n                    if (localStorage.getItem('username') === null) {\n                        setRequestedUsername(true);\n                    } else {\n                        sendMsg({\n                            action: 'register_player',\n                            uuid: uuid,\n                            username: localStorage.getItem('username'),\n                        });\n                    }\n                    break;\n                case 'register_response':\n                    if (_msg.success) {\n                        localStorage.setItem('username', _msg.username);\n                        setRequestedUsername(false);\n                    }\n                    break;\n                case 'game_over':\n                    setWinner(_msg.winner);\n                    break;\n            }\n        })\n\n        ws.addEventListener('open', msg => {\n            sendMsg({\n                action: 'check_registered',\n                uuid: uuid,\n            });\n        });\n    }, []);\n\n    function waitingFor() {\n        let _player = [];\n        players.forEach(player => {\n            if (player.awaitingMove) _player = {...player};\n        });\n        _player.username += \"'s\";\n        if (_player.uuid === uuid) _player.username = 'Your';\n        return _player;\n    }\n\n    return (\n        <div className={'App'}>\n            {\n                requestedUsername ? (\n                    <RegistrationForm />\n                ) : gameState === 0 ? (\n                    <Lobby players={players} />\n                ) : gameState >= 1 ? (\n                    <div>\n                        {\n                            gameState === 2 ? (\n                                <div className={'GameOverScreen'}>\n                                    <h1>{winner.username} won!</h1>\n                                </div>\n                            ) : ''\n                        }\n                        <Board gameState={gameState} tileData={tileData} />\n                        {\n                            gameState === 1 ? (\n                                <div className={'TurnInfo'}>\n                                    <span className={'player-color-' + waitingFor().playerNumber}>{waitingFor().username} turn</span>\n                                </div>\n                            ) : ''\n                        }\n                    </div>\n                ) : ''\n            }\n            <div className={'Logo'}>\n                <span className={'Logo__connect'}>connect</span><span className={'Logo__4'}>4</span>\n            </div>\n            <ul className={'PlayerList'}>\n                {\n                    players.map((item, i) => (\n                        <li key={i} className={'PlayerList__player' + (item.awaitingMove ? ' awaitingMove' : '')}><span className={'PlayerList__playerColor player-' + (item.playerNumber)}></span>{item.username} {item.ready && gameState === 0 ? <i className=\"fas fa-check\"></i> : ''}</li>\n                        )\n                    )\n                }\n            </ul>\n        </div>\n    );\n}\n\nfunction RegistrationForm() {\n    const [ username, setUsername ] = useState( '' );\n    const [ error, setError ] = useState( '' );\n\n    function register() {\n        if (username === '') {\n            setError('Username must not be empty');\n        } else {\n            setError('');\n            // Try register\n            sendMsg({\n                action: 'register_player',\n                uuid: uuid,\n                username: username,\n            });\n        }\n    }\n\n    return (\n        <div className={'RegistrationForm'}>\n            <h1 className={'RegistrationForm__label'}>Enter A Username</h1>\n            <input maxLength={16} onKeyPress={e => {if (e.key === 'Enter') register();}} onChange={e => setUsername(e.currentTarget.value)} className={'RegistrationForm__input'} type={'text'} value={username} />\n            <div className={'RegistrationForm__submit btn'} onClick={register}>JOIN</div>\n            {\n                error === '' ? '' : (\n                    <div className={'RegistrationForm__error'}>{error}</div>\n                )\n            }\n        </div>\n    );\n}\n\nfunction Lobby(props) {\n    const [ ready, setReady ] = useState( false );\n\n    useEffect(() => {\n        ws.addEventListener('message', msg => {\n            const _msg = JSON.parse(msg.data);\n            switch(_msg.action) {\n                case 'update_player':\n                    setReady( _msg.ready );\n                    break;\n            }\n        })\n    }, []);\n\n    function toggleReady() {\n        sendMsg({\n            action: 'set_ready',\n            ready: !ready,\n            uuid: uuid\n        });\n        setReady(!ready);\n    }\n\n    return (\n        <div className={'Lobby'}>\n            <h1 className={'Lobby__title'}>Lobby</h1>\n            <h3 className={'Lobby__playerCount'}>{props.players.length} Player{props.players.length > 1 ? 's' : ''}</h3>\n            <div className={'btn' + (ready ? ' active' : '')} onClick={toggleReady}>{ready ? 'UNREADY' : 'READY UP'}</div>\n        </div>\n    );\n}\n\nfunction Board(props) {\n    return (\n        <div className={'Board' + (props.gameState === 2 ? ' gameover' : '')}>\n            {\n                props.tileData.map((item, i) => (\n                    <BoardRow row={item} key={i} />\n                ))\n            }\n        </div>\n    );\n}\n\nfunction BoardRow(props) {\n    return (\n        <div className={'Board__row'}>\n            {\n                props.row.map((item, i) => (\n                    <Tile highlighted={item.highlighted} occupation={item.occupiedBy} x={item.x} y={item.y} key={i} />\n                ))\n            }\n        </div>\n    );\n}\n\nfunction Tile(props) {\n    function occupy() {\n        //props.dropTileAtColumn(props.x);\n        sendMsg({\n            action: 'make_move',\n            uuid: uuid,\n            position: {x: props.x, y: props.y}\n        });\n    }\n\n    useEffect(() => {\n        console.log('Occ: ' + props.occupation);\n    }, [props.occupation]);\n\n    return (\n        <div className={'Tile'}>\n            <div className={'Tile__cutout'} onClick={occupy}>\n                {\n                    props.occupation > 0 ? (\n                        <div className={'Tile__token occupied-by-' + props.occupation + (props.highlighted ? ' highlighted' : '')}></div>\n                    ) : ''\n                }\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","/home/dan/WebstormProjects/fourwins/client/src/index.js",[],"/home/dan/WebstormProjects/fourwins/client/src/reportWebVitals.js",[],{"ruleId":"44","severity":1,"message":"45","line":7,"column":16,"nodeType":"46","messageId":"47","endLine":7,"endColumn":22},{"ruleId":"48","severity":1,"message":"49","line":19,"column":32,"nodeType":"50","messageId":"51","endLine":19,"endColumn":33},{"ruleId":"48","severity":1,"message":"49","line":19,"column":36,"nodeType":"50","messageId":"51","endLine":19,"endColumn":37},{"ruleId":"44","severity":1,"message":"52","line":41,"column":13,"nodeType":"46","messageId":"47","endLine":41,"endColumn":15},{"ruleId":"44","severity":1,"message":"53","line":42,"column":13,"nodeType":"46","messageId":"47","endLine":42,"endColumn":19},{"ruleId":"54","severity":1,"message":"55","line":53,"column":13,"nodeType":"56","messageId":"57","endLine":63,"endColumn":14},{"ruleId":"44","severity":1,"message":"58","line":86,"column":18,"nodeType":"46","messageId":"47","endLine":86,"endColumn":24},{"ruleId":"44","severity":1,"message":"59","line":88,"column":18,"nodeType":"46","messageId":"47","endLine":88,"endColumn":24},{"ruleId":"54","severity":1,"message":"55","line":107,"column":13,"nodeType":"56","messageId":"57","endLine":120,"endColumn":14},{"ruleId":"54","severity":1,"message":"55","line":125,"column":13,"nodeType":"56","messageId":"57","endLine":138,"endColumn":14},{"ruleId":"60","severity":1,"message":"61","line":159,"column":8,"nodeType":"62","endLine":159,"endColumn":10,"suggestions":"63"},{"ruleId":"44","severity":1,"message":"45","line":4,"column":16,"nodeType":"46","messageId":"47","endLine":4,"endColumn":22},{"ruleId":"48","severity":1,"message":"49","line":24,"column":32,"nodeType":"50","messageId":"51","endLine":24,"endColumn":33},{"ruleId":"48","severity":1,"message":"49","line":24,"column":36,"nodeType":"50","messageId":"51","endLine":24,"endColumn":37},{"ruleId":"54","severity":1,"message":"55","line":50,"column":13,"nodeType":"56","messageId":"57","endLine":90,"endColumn":14},{"ruleId":"54","severity":1,"message":"55","line":191,"column":13,"nodeType":"56","messageId":"57","endLine":195,"endColumn":14},"no-unused-vars","'Howler' is defined but never used.","Identifier","unusedVar","no-mixed-operators","Unexpected mix of '&' and '|'.","BinaryExpression","unexpectedMixedOperator","'ws' is assigned a value but never used.","'wsOpen' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'setRot' is assigned a value but never used.","'setDim' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'pos' and 'vel'. Either include them or remove the dependency array.","ArrayExpression",["64"],{"desc":"65","fix":"66"},"Update the dependencies array to be: [pos, vel]",{"range":"67","text":"68"},[4623,4625],"[pos, vel]"]